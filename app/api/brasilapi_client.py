# -*- coding: utf-8 -*-
"""
Cliente BrasilAPI - Camada de Abstra√ß√£o Unificada
Pre√ßo √Ågil

Fornece interface est√°vel e simplificada para m√∫ltiplas APIs governamentais
Fallback autom√°tico quando APIs oficiais falham

Fonte: https://github.com/BrasilAPI/BrasilAPI
"""

import requests
from typing import Dict, Optional
from datetime import datetime

class BrasilAPIClient:
    """
    Cliente para BrasilAPI - Agregador mantido pela comunidade
    
    VANTAGENS:
    - Interface unificada e est√°vel
    - Fallback autom√°tico
    - Sem necessidade de m√∫ltiplas chaves de API
    - Cache inteligente
    - Rate limiting gerenciado
    """
    
    def __init__(self):
        self.base_url = "https://brasilapi.com.br/api"
        self.session = requests.Session()
        self.session.headers.update({
            'Accept': 'application/json',
            'User-Agent': 'PrecoAgil/1.0'
        })
        self._cache = {}
    
    def get_cnpj_info(self, cnpj: str) -> Optional[Dict]:
        """
        Obt√©m informa√ß√µes de CNPJ (Receita Federal)
        √ötil para validar fornecedores
        
        Args:
            cnpj: CNPJ do fornecedor (apenas n√∫meros ou com formata√ß√£o)
        
        Returns:
            Informa√ß√µes completas do CNPJ ou None se n√£o encontrado
        """
        # Remove formata√ß√£o
        cnpj_clean = ''.join(filter(str.isdigit, cnpj))
        
        if len(cnpj_clean) != 14:
            print(f"  ‚ö†Ô∏è CNPJ inv√°lido: {cnpj}")
            return None
        
        # Verifica cache
        if cnpj_clean in self._cache:
            print(f"  üíæ CNPJ {cnpj_clean} recuperado do cache")
            return self._cache[cnpj_clean]
        
        endpoint = f"{self.base_url}/cnpj/v1/{cnpj_clean}"
        
        try:
            response = self.session.get(endpoint, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            result = {
                'cnpj': data.get('cnpj'),
                'razao_social': data.get('razao_social'),
                'nome_fantasia': data.get('nome_fantasia'),
                'situacao': data.get('descricao_situacao_cadastral'),
                'data_situacao': data.get('data_situacao_cadastral'),
                'uf': data.get('uf'),
                'municipio': data.get('municipio'),
                'bairro': data.get('bairro'),
                'logradouro': data.get('logradouro'),
                'numero': data.get('numero'),
                'cep': data.get('cep'),
                'email': data.get('email'),
                'telefone': data.get('ddd_telefone_1'),
                'porte': data.get('porte'),
                'natureza_juridica': data.get('natureza_juridica'),
                'atividade_principal': data.get('cnae_fiscal_descricao'),
                'capital_social': data.get('capital_social')
            }
            
            # Armazena em cache
            self._cache[cnpj_clean] = result
            
            return result
        
        except requests.exceptions.RequestException as e:
            print(f"  ‚ö†Ô∏è Erro ao consultar CNPJ {cnpj_clean} via BrasilAPI: {e}")
            return None
    
    def get_cep_info(self, cep: str) -> Optional[Dict]:
        """
        Obt√©m informa√ß√µes de CEP
        √ötil para validar endere√ßos de fornecedores/√≥rg√£os
        
        Args:
            cep: CEP (apenas n√∫meros ou com h√≠fen)
        
        Returns:
            Informa√ß√µes do endere√ßo ou None
        """
        # Remove formata√ß√£o
        cep_clean = ''.join(filter(str.isdigit, cep))
        
        if len(cep_clean) != 8:
            return None
        
        # Verifica cache
        if f"cep_{cep_clean}" in self._cache:
            return self._cache[f"cep_{cep_clean}"]
        
        endpoint = f"{self.base_url}/cep/v2/{cep_clean}"
        
        try:
            response = self.session.get(endpoint, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            # Armazena em cache
            self._cache[f"cep_{cep_clean}"] = data
            
            return data
        
        except requests.exceptions.RequestException as e:
            print(f"  ‚ö†Ô∏è Erro ao consultar CEP {cep_clean}: {e}")
            return None
    
    def get_banco_info(self, codigo_banco: str) -> Optional[Dict]:
        """
        Obt√©m informa√ß√µes de banco
        √ötil para validar dados banc√°rios de fornecedores
        
        Args:
            codigo_banco: C√≥digo do banco (3 d√≠gitos)
        
        Returns:
            Informa√ß√µes do banco ou None
        """
        codigo_clean = ''.join(filter(str.isdigit, codigo_banco)).zfill(3)
        
        endpoint = f"{self.base_url}/banks/v1/{codigo_clean}"
        
        try:
            response = self.session.get(endpoint, timeout=10)
            response.raise_for_status()
            
            return response.json()
        
        except requests.exceptions.RequestException:
            return None
    
    def validate_supplier(self, cnpj: str) -> Dict:
        """
        Valida fornecedor usando m√∫ltiplas checagens
        
        Args:
            cnpj: CNPJ do fornecedor
        
        Returns:
            Dicion√°rio com status de valida√ß√£o completo
        """
        if not cnpj:
            return {
                'valid': False,
                'reason': 'CNPJ n√£o informado'
            }
        
        cnpj_info = self.get_cnpj_info(cnpj)
        
        if not cnpj_info:
            return {
                'valid': False,
                'reason': 'CNPJ n√£o encontrado na Receita Federal'
            }
        
        # Verifica situa√ß√£o cadastral
        situacao = (cnpj_info.get('situacao') or '').upper()
        
        if 'ATIVA' not in situacao:
            return {
                'valid': False,
                'reason': f'Situa√ß√£o cadastral irregular: {situacao}',
                'cnpj_info': cnpj_info
            }
        
        # Verifica se n√£o est√° em d√©bito (se dispon√≠vel)
        warnings = []
        
        # Aviso se n√£o tem email
        if not cnpj_info.get('email'):
            warnings.append('Email n√£o cadastrado')
        
        # Aviso se n√£o tem telefone
        if not cnpj_info.get('telefone'):
            warnings.append('Telefone n√£o cadastrado')
        
        return {
            'valid': True,
            'cnpj_info': cnpj_info,
            'warnings': warnings
        }
    
    def clear_cache(self):
        """Limpa o cache interno"""
        self._cache.clear()
        print("  üßπ Cache do BrasilAPI limpo")